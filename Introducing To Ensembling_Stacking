{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Introducing To Ensembling/Stacking","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMqSIaaXTJ75hKnRF2TuWmw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":870},"id":"fBXm60fTV_Iy","executionInfo":{"status":"ok","timestamp":1630468368387,"user_tz":-540,"elapsed":20186,"user":{"displayName":"주민철","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiyWit6t5NLiDB8JMoc--Zl6z9w2XkJj6cKjnc0Bg=s64","userId":"03090286669885790719"}},"outputId":"5203a3b6-6b0b-4153-fd8e-5b6741b56bb7"},"source":["!pip install kaggle\n","from google.colab import files\n","files.upload()\n","!mkdir -p ~/.kaggle\n","!cp kaggle.json ~/.kaggle/\n","# permission warning이 일어나지 않도록\n","!chmod 600 ~/.kaggle/kaggle.json\n","\n","# 내가 참가한 모든 대회보기\n","!kaggle competitions list\n","!kaggle competitions download -c titanic"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: kaggle in /usr/local/lib/python3.7/dist-packages (1.5.12)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.8.2)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.24.3)\n","Requirement already satisfied: python-slugify in /usr/local/lib/python3.7/dist-packages (from kaggle) (5.0.2)\n","Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.7/dist-packages (from kaggle) (1.15.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from kaggle) (2.23.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from kaggle) (4.62.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from kaggle) (2021.5.30)\n","Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.7/dist-packages (from python-slugify->kaggle) (1.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->kaggle) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->kaggle) (3.0.4)\n"]},{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-f486a3d9-e822-4912-aa51-9c0977015928\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f486a3d9-e822-4912-aa51-9c0977015928\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving kaggle.json to kaggle.json\n","Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.12 / client 1.5.4)\n","ref                                                  deadline             category            reward  teamCount  userHasEntered  \n","---------------------------------------------------  -------------------  ---------------  ---------  ---------  --------------  \n","contradictory-my-dear-watson                         2030-07-01 23:59:00  Getting Started     Prizes         61           False  \n","gan-getting-started                                  2030-07-01 23:59:00  Getting Started     Prizes        140           False  \n","tpu-getting-started                                  2030-06-03 23:59:00  Getting Started  Knowledge        188           False  \n","digit-recognizer                                     2030-01-01 00:00:00  Getting Started  Knowledge       1577           False  \n","titanic                                              2030-01-01 00:00:00  Getting Started  Knowledge      50154           False  \n","house-prices-advanced-regression-techniques          2030-01-01 00:00:00  Getting Started  Knowledge       4638           False  \n","connectx                                             2030-01-01 00:00:00  Getting Started  Knowledge        299           False  \n","nlp-getting-started                                  2030-01-01 00:00:00  Getting Started  Knowledge        976           False  \n","competitive-data-science-predict-future-sales        2022-12-31 23:59:00  Playground           Kudos      12447           False  \n","lux-ai-2021                                          2021-12-06 23:59:00  Featured           $10,000        296           False  \n","chaii-hindi-and-tamil-question-answering             2021-11-15 23:59:00  Research           $10,000        297           False  \n","nfl-health-and-safety-helmet-assignment              2021-11-02 23:59:00  Featured          $100,000        208           False  \n","rsna-miccai-brain-tumor-radiogenomic-classification  2021-10-15 23:59:00  Featured           $30,000        911           False  \n","landmark-retrieval-2021                              2021-10-01 23:59:00  Research              Swag         89           False  \n","landmark-recognition-2021                            2021-10-01 23:59:00  Research              Swag        143           False  \n","learnplatform-covid19-impact-on-digital-learning     2021-09-30 23:59:00  Analytics          $20,000          0           False  \n","tabular-playground-series-sep-2021                   2021-09-30 23:59:00  Playground            Swag         20           False  \n","g2net-gravitational-wave-detection                   2021-09-29 23:59:00  Research           $15,000        905           False  \n","optiver-realized-volatility-prediction               2021-09-27 23:59:00  Featured          $100,000       2955           False  \n","mlb-player-digital-engagement-forecasting            2021-09-15 23:59:00  Featured           $50,000        852           False  \n","Warning: Looks like you're using an outdated API Version, please consider updating (server 1.5.12 / client 1.5.4)\n","Downloading train.csv to /content\n","  0% 0.00/59.8k [00:00<?, ?B/s]\n","100% 59.8k/59.8k [00:00<00:00, 44.3MB/s]\n","Downloading gender_submission.csv to /content\n","  0% 0.00/3.18k [00:00<?, ?B/s]\n","100% 3.18k/3.18k [00:00<00:00, 3.06MB/s]\n","Downloading test.csv to /content\n","  0% 0.00/28.0k [00:00<?, ?B/s]\n","100% 28.0k/28.0k [00:00<00:00, 29.1MB/s]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"uQXZxwKoVxeC","executionInfo":{"status":"ok","timestamp":1630468370940,"user_tz":-540,"elapsed":2556,"user":{"displayName":"주민철","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiyWit6t5NLiDB8JMoc--Zl6z9w2XkJj6cKjnc0Bg=s64","userId":"03090286669885790719"}},"outputId":"63c40b93-3332-4030-a3fe-11e0f653968c"},"source":["# Load in our libraries\n","import pandas as pd\n","import numpy as np\n","import re # 문자열 연산\n","import sklearn\n","import xgboost as xgb # 약한 분류기를 세트로 묶어서 정확도를 예측하하는 기법\n","# 병렬처리를 사용하기 떄문에 학습과 분류가 빠르다\n","# 유연성이 좋고, 커스텀 최적화 옵션을 제공한다\n","# Greedy-Algorithm을 사용한 자동 가지치기가 가능하다. 과적합이 잘 일어나지 않는다\n","# 다른 알고리즘과 연계하여 앙상블 학습이 가능하다.\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","%matplotlib inline \n","# notebook을 실행한 브라우저에서 바로 그림을 보여줄수 있게 해주는 것이다.\n","\n","import plotly.offline as py # interactive 그래프를 그려주는 library\n","py.init_notebook_mode(connected=True)\n","import plotly.graph_objs as go\n","import plotly.tools as tls\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","# Going to use these 5 base models for the stacking\n","from sklearn.ensemble import (RandomForestClassifier, AdaBoostClassifier, \n","                              GradientBoostingClassifier, ExtraTreesClassifier)\n","from sklearn.svm import SVC # Support Vector Machine\n","# SVC의 C란 비선형의 분리가능 데이터를 위한 선형제약에 대한 여유값을 통칭.\n","from sklearn.model_selection import KFold"],"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/html":["        <script type=\"text/javascript\">\n","        window.PlotlyConfig = {MathJaxConfig: 'local'};\n","        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n","        if (typeof require !== 'undefined') {\n","        require.undef(\"plotly\");\n","        requirejs.config({\n","            paths: {\n","                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n","            }\n","        });\n","        require(['plotly'], function(Plotly) {\n","            window._Plotly = Plotly;\n","        });\n","        }\n","        </script>\n","        "]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IKwdlKbvWk4f","executionInfo":{"status":"ok","timestamp":1630468370940,"user_tz":-540,"elapsed":5,"user":{"displayName":"주민철","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiyWit6t5NLiDB8JMoc--Zl6z9w2XkJj6cKjnc0Bg=s64","userId":"03090286669885790719"}},"outputId":"74524a78-f033-4d22-9fff-a7e4f9a50606"},"source":["train = pd.read_csv('train.csv')\n","test = pd. read_csv('test.csv')\n","\n","# Store our Passenger ID for Easy Access\n","PassengerID = test['PassengerId'] # Data Type : Series\n","# PassengerID\n","# train.head(3)\n","type(PassengerID)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pandas.core.series.Series"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"5bfVTzUDWlOz","executionInfo":{"status":"ok","timestamp":1630468370941,"user_tz":-540,"elapsed":4,"user":{"displayName":"주민철","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiyWit6t5NLiDB8JMoc--Zl6z9w2XkJj6cKjnc0Bg=s64","userId":"03090286669885790719"}}},"source":["# Feature Engineering \n","\n","full_data = [train, test]\n","\n","# Some Feature of my own that I have added in\n","# Gives the length of the name\n","train['Name_length'] = train['Name'].apply(len) # 길이를 적용해서 train_length에 넣음.\n","test['Name_length']=test['Name'].apply(len)\n","\n","# Feature that tells whether a passenger had a cabin on the Titanic\n","train['Has_Cabin'] = train['Cabin'].apply (lambda x : 0 if type(x) == float else 1)\n","test['Has_Cabin'] = test['Cabin'].apply(lambda x :0 if type(x)==float else 1 )\n","\n"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"fPG5ahMdWlT1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630469286311,"user_tz":-540,"elapsed":252,"user":{"displayName":"주민철","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiyWit6t5NLiDB8JMoc--Zl6z9w2XkJj6cKjnc0Bg=s64","userId":"03090286669885790719"}},"outputId":"de3da6b2-a226-444c-c4b4-ee7b0322eafa"},"source":["# train.head()\n","train.info()"],"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 14 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n"," 12  Name_length  891 non-null    int64  \n"," 13  Has_Cabin    891 non-null    int64  \n","dtypes: float64(2), int64(7), object(5)\n","memory usage: 97.6+ KB\n"]}]},{"cell_type":"code","metadata":{"id":"jzE4nDNaWlXt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630471109541,"user_tz":-540,"elapsed":248,"user":{"displayName":"주민철","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiyWit6t5NLiDB8JMoc--Zl6z9w2XkJj6cKjnc0Bg=s64","userId":"03090286669885790719"}},"outputId":"1683a6d7-920c-4dfc-d7ac-074d23d99bca"},"source":["# Feature engineering steps\n","# Create new feature FamilySize as a combination of SibSp and Parch\n","for dataset in full_data:\n","  dataset['FamilySize'] = dataset['SibSp']+ dataset['Parch']+1\n","# Create new feature IsAlone from FamilySize\n","for dataset in full_data:\n","  dataset['IsAlone']=0 #만들고\n","  dataset.loc[dataset['FamilySize']==1, 'IsAlone']=1; #값을 넣어주는 과정으로 CODE!\n","# Remove all Nulls in the Embarked Column\n","for dataset in full_data:\n","  dataset['Embarked']= dataset['Embarked'].fillna('S')\n","\n","# Remove all Nulls in the Fare column and create a new feature CategoricalFare\n","for dataset in full_data:\n","  dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\n","train['CategoricalFare']= pd.qcut(train['Fare'],4) # categorical Fare의 범주를 지정하여 \n","# type(train['CategoricalFare']) # Series\n","# print(train.loc[train['PassengerId']==1,'CategoricalFare']) # DataFrame Indexing 할때 사용한다.(loc)\n","\n","\n","\n"],"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["0    (-0.001, 7.91]\n","Name: CategoricalFare, dtype: category\n","Categories (4, interval[float64]): [(-0.001, 7.91] < (7.91, 14.454] < (14.454, 31.0] <\n","                                    (31.0, 512.329]]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"_GCg4HS0pKZn","executionInfo":{"status":"ok","timestamp":1630470990049,"user_tz":-540,"elapsed":254,"user":{"displayName":"주민철","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiyWit6t5NLiDB8JMoc--Zl6z9w2XkJj6cKjnc0Bg=s64","userId":"03090286669885790719"}},"outputId":"10250d30-580f-467d-837b-b6d3139173b6"},"source":["train.head(3)\n"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","      <th>Name_length</th>\n","      <th>Has_Cabin</th>\n","      <th>FamilySize</th>\n","      <th>IsAlone</th>\n","      <th>CategoricalFare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","      <td>23</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>(-0.001, 7.91]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","      <td>51</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>(31.0, 512.329]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","      <td>22</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>(7.91, 14.454]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ... FamilySize IsAlone  CategoricalFare\n","0            1         0       3  ...          2       0   (-0.001, 7.91]\n","1            2         1       1  ...          2       0  (31.0, 512.329]\n","2            3         1       3  ...          1       1   (7.91, 14.454]\n","\n","[3 rows x 17 columns]"]},"metadata":{},"execution_count":31}]},{"cell_type":"markdown","metadata":{"id":"KbXqD4RFWlbG"},"source":[""]},{"cell_type":"code","metadata":{"id":"AkzU3r2RWlhY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630470630981,"user_tz":-540,"elapsed":253,"user":{"displayName":"주민철","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiyWit6t5NLiDB8JMoc--Zl6z9w2XkJj6cKjnc0Bg=s64","userId":"03090286669885790719"}},"outputId":"3637bde5-7f19-4285-b1f0-456e8034fcf8"},"source":["for dataset in full_data : \n","  age_avg = dataset['Age'].mean()\n","  age_std = dataset['Age'].std()\n","  age_null_count = dataset['Age'].isnull().sum()\n","  age_null_random_list = np.random.randint(age_avg - age_std, age_avg+age_std, size = age_null_count)\n","  dataset['Age'][np.isnan(dataset['Age'])]=age_null_random_list\n","  dataset['Age'] = dataset['Age'].astype(int)\n","train['CategoricalFare'] = pd.cut(train['Age'],5)\n","\n","# Define function to extract titles from passengers names\n","def get_title(name): # 동작 확인해볼것\n","  title_search = re.search('([A-Za-z]+\\.',name)\n","  # If the title exists, extract and return it\n","    if title_search : \n","      return title_search.group(1)\n","    return \"\"\n","\n","# Create a new Feature Ttiel, containing the titles of passenger names\n","for dataset in full_data : \n","  dataset['Title'] = dataset['Name'].apply(get_title)\n","\n","# Group all Non-Common Titles into one single grouping 'Rare'\n","for dataset in full_data:\n","  dataset['Title'] = dataset['Title'].replace(['Lady','Countess', 'Capt'])\n","\n"],"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 16 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     891 non-null    object \n"," 12  Name_length  891 non-null    int64  \n"," 13  Has_Cabin    891 non-null    int64  \n"," 14  FamilySize   891 non-null    int64  \n"," 15  IsAlone      891 non-null    int64  \n","dtypes: float64(2), int64(9), object(5)\n","memory usage: 111.5+ KB\n"]}]},{"cell_type":"code","metadata":{"id":"3tmTNyINWk2G"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GorsbQOMWkzR"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LZiAvRYbWkwh"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xQ6XJzy0Wkts"},"source":[""],"execution_count":null,"outputs":[]}]}